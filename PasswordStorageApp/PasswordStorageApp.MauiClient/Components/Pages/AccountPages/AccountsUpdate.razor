@page "/accounts/update/{Id:guid}"
@using System.Net
@using PasswordStorageApp.Domain.Dtos
@using PasswordStorageApp.Domain.Enums
@using IToastService = PasswordStorageApp.MauiClient.Services.IToastService
@inject DialogService DialogService
@inject HttpClient HttpClient
@inject IToastService ToastService
@inject NavigationManager Navigation

@if (updateDto is null)
{
    <Loading />
}
else
{
    <RadzenTemplateForm Data="@updateDto" Submit="@((AccountUpdateDto args) => SubmitAsync())">
        <RadzenRow Gap="2rem" class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenStack>
                    <RadzenFieldset Text="Account Details">
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Account Type" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value="updateDto.Type" AllowClear="true" Placeholder="Select Account Type..." Data="@accountTypes" Style="width: 100%;" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Username" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" @bind-Value="updateDto.Username" Placeholder="Enter Your Username..." />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Password" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenPassword Style="width: 100%;" @bind-Value="updateDto.Password" Placeholder="Enter Your Password..." />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8 rz-mb-4">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Submit" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" Click="@Cancel" />
        </RadzenStack>
    </RadzenTemplateForm>
}

@code {
    [Parameter] public Guid Id { get; set; }
    [Parameter] public bool IsDialog { get; set; } = false;

    private AccountUpdateDto updateDto = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var response = await HttpClient.GetAsync($"Accounts/{Id}");

        if (response.IsSuccessStatusCode)
        {
            var account = await response.Content.ReadFromJsonAsync<AccountGetByIdDto>();

            updateDto = account.ToUpdateDto();
        }
        else
        {
            ToastService.Warning("The account to update was not found or a temporary error occurred.", "Warning");

            if (IsDialog)
                DialogService.Close(false);

            else
                Navigation.NavigateTo("/accounts");
        }
    }

    private IEnumerable<AccountType> accountTypes = Enum.GetValues<AccountType>();

    private async Task SubmitAsync()
    {
        var response = await HttpClient.PutAsJsonAsync($"Accounts/{Id}", updateDto);

        if (response.IsSuccessStatusCode)
        {
            ToastService.Success("Account Updated.", "Account updated successfully.");

            if (IsDialog)
                DialogService.Close(true);

            else
                Navigation.NavigateTo("/accounts");
        }
        else
        {
            if (response.StatusCode == HttpStatusCode.BadRequest || response.StatusCode == HttpStatusCode.NotFound)
            {
                ToastService.Warning("Please check the form...", "Warning");
            }
            else
            {
                ToastService.Error("An error occurred on the server side while adding the account.", "Error");
            }
        }
    }

    private void Cancel()
    {
        if (IsDialog)
            DialogService.Close(false);

        else
            Navigation.NavigateTo("/accounts");
    }
}