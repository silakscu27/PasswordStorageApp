@page "/accounts"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using PasswordStorageApp.Domain.Dtos
@using IToastService = PasswordStorageApp.MauiClient.Services.IToastService
@inject HttpClient HttpClient
@inject DialogService DialogService
@inject IToastService ToastService

<PageTitle>Hesaplar</PageTitle>


@if (accounts is null)
{
    <Loading />
}
else
{
    <RadzenCard Variant="Variant.Filled">

        <h3 class="text-center">Hesaplar</h3>

        <RadzenButton Click="HandleAddClickAsync" ButtonStyle="ButtonStyle.Primary" Text="Ekle" Style="margin-bottom: 1rem;" />


        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@accounts" ColumnWidth="300px">
            <Columns>
                <RadzenDataGridColumn Property="@nameof(AccountGetAllDto.Id)" Title="ID" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Property="@nameof(AccountGetAllDto.Username)" Title="UserName" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Property="@nameof(AccountGetAllDto.Password)" Title="Password" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Property="@nameof(AccountGetAllDto.Type)" Title="Type" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Property="@nameof(AccountGetAllDto.CreatedOn)" Title="Created On" TextAlign="TextAlign.Center" />

                <RadzenDataGridColumn Title="Actions" Frozen="true" Sortable="false" Filterable="false" Width="120px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="edit" Click="@(() => HandleUpdateClickAsync(data.Id))" />
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="@(() => HandleRemoveClickAsync(data))" />
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </RadzenCard>

}



@code
{
    private HubConnection hubConnection;
    private IEnumerable<AccountGetAllDto> accounts = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // accounts = await HttpClient.GetFromJsonAsync<IEnumerable<AccountGetAllDto>>("Accounts");

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://csharpjavadandahaiyi.tailwindcomponents.io/hubs/accountsHub")
            .WithAutomaticReconnect()
            .ConfigureLogging(config => config.SetMinimumLevel(LogLevel.Information))
            .Build();

        hubConnection.On<AccountGetAllDto>("AccountCreated", async (createdAccount) =>
        {
            accounts = accounts.Append(createdAccount);

            ToastService.Info($"A new account was created by a different user. {createdAccount.Username}");

            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Guid>("AccountRemoved", async (deletedAccountId) =>
        {
            accounts = accounts.Where(ac => ac.Id != deletedAccountId);

            ToastService.Info($"A new account was deleted by a different user. {deletedAccountId}");

            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<AccountGetAllDto>("AccountUpdated", async (updatedAccount) =>
        {
            var tempAccounts = accounts.ToList();

            var updatedAccountsIndex = tempAccounts.FindIndex(ac => ac.Id == updatedAccount.Id);

            tempAccounts[updatedAccountsIndex] = updatedAccount;

            accounts = new List<AccountGetAllDto>(tempAccounts);

            ToastService.Info($"A new account was updated by a different user. {updatedAccount.Id}");

            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        accounts = await hubConnection.InvokeAsync<IEnumerable<AccountGetAllDto>>("GetAllAsync");

    }

    private async Task HandleAddClickAsync()
    {
        var result = await DialogService.OpenAsync<AccountsAdd>($"Add account",
             new Dictionary<string, object>() { { "IsDialog", true } },
             new DialogOptions()
                 {
                     Resizable = true,
                     Draggable = true,
                     Width = "700px",
                     Height = "512px",
                 });

        if (result is not null && (bool)result)
        {
            accounts = await HttpClient.GetFromJsonAsync<IEnumerable<AccountGetAllDto>>("Accounts");
        }
    }
    private async Task HandleUpdateClickAsync(Guid id)
    {
        var result = await DialogService.OpenAsync<AccountsUpdate>($"Update account",
            new Dictionary<string, object>() { { "IsDialog", true }, { "Id", id } },
            new DialogOptions()
                {
                    Resizable = true,
                    Draggable = true,
                    Width = "700px",
                    Height = "512px",
                });

        if (result is not null && (bool)result)
        {
            accounts = await HttpClient.GetFromJsonAsync<IEnumerable<AccountGetAllDto>>("Accounts");
        }
    }

    private async Task HandleRemoveClickAsync(AccountGetAllDto account)
    {
        CancellationTokenSource cts = new CancellationTokenSource();

        var result = await DialogService
            .Confirm("Are you sure you want to delete?", "Deleting Selected Record", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });


        if (result is not null && (bool)result)
        {
            await hubConnection.InvokeAsync("RemoveAsync", account.Id, cts.Token);

            ToastService.Success("The selected record was deleted successfully.", "Record Deleted");

            accounts = accounts.Where(ac => ac.Id != account.Id);
        }


    }
}